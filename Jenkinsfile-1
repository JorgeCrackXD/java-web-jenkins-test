pipeline {
  agent none
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  environment {
    dockerHubUser = "admin"
    dockerHubPassword = "atomic"
  }
  stages {
    stage('Quality') {
      agent {
        docker {
          image 'maven:3.6.3-jdk-11'
        }
      }
      steps {
          script{
            withSonarQubeEnv('sonar') {
                sh 'mvn sonar:sonar -B -ntp -Dsonar.projectKey=project-test'
            }
            sleep 15
            timeout(time: 2, unit: 'MINUTES') {
              def qg = waitForQualityGate()                  
              if (qg.status != 'OK') {
                error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
            }
          }              
      }
    }
    stage("Build Jar File"){
      agent {
        docker {
          image 'maven:3.6.3-jdk-11'
        }
      }
      steps {
        dir('/home/jcantu/.jenkins/workspace/test-task') {
          sh 'mvn -U -Dmaven.test.skip=true clean install'
        }
      }
    }
    stage("Upload Artifact to nexus"){
      agent {
        docker {
          image 'maven:3.6.3-jdk-11'
        }
      }
      steps {
        script {
          dir ('/home/jcantu/.jenkins/workspace/test-task') {
            withCredentials([usernamePassword(credentialsId: 'nexus-auth', passwordVariable: 'PSW', usernameVariable: 'USR')]) {
              sh 'mvn clean -s settings.xml -U -B -ntp deploy -Dmaven.test.skip=true -DGFB_MVN_NEXUS_USR='$USR' -DGFB_MVN_NEXUS_PWD=$'$PSW''
            }
          }
        }
      }
    }
    stage("Upload image to Nexus"){
      agent any
      steps {
        script {
          dir ('/home/jcantu/.jenkins/workspace/test-task'){
            withCredentials([usernamePassword(credentialsId: 'nexus-auth', passwordVariable: 'PSW', usernameVariable: 'USR')]) {
              def pomBuild = readMavenPom file: 'pom.xml'
              def repoDocker = "localhost:8085/${pomBuild.artifactId}"
              sh "echo ${PSW} | docker login -u ${USR} --password-stdin localhost:8085"
              sh "docker build -f Dockerfile -t ${pomBuild.artifactId}:${pomBuild.version} ."
              sh "docker ps -a"
              sh "docker tag ${pomBuild.artifactId}:${pomBuild.version} ${repoDocker}:${pomBuild.version}"
              sh "docker tag ${pomBuild.artifactId}:${pomBuild.version} ${repoDocker}:latest"
              sh "docker push ${repoDocker}:${pomBuild.version}"
              sh "docker push ${repoDocker}:latest"
              sh "docker logout"
              sh "docker rmi -f ${pomBuild.artifactId}:${pomBuild.version}"
              sh "docker rmi -f ${repoDocker}:${pomBuild.version}"
              sh "docker rmi -f ${repoDocker}:latest"
              sh "docker image prune -f"
              sh "docker builder prune -f"
            }
          }
        }
      }
    }
    stage("Deploy to host") {
      agent any
      steps {
        script{
          dir ('/home/jcantu/.jenkins/workspace/test-task'){
            withCredentials([usernamePassword(credentialsId: 'nexus-auth', passwordVariable: 'PSW', usernameVariable: 'USR')]) {
              def pomBuild = readMavenPom file: 'pom.xml'
              def port = 8085
              def type = "jar"         
              //scp -o StrictHostKeyChecking=no target/*.jar user@host:/home/ubuntu           
              sshagent ( credentials: ['deploy-server']){
                sh "ssh jorge@192.168.1.70 'ubuntu/deploy.sh' ${pomBuild.artifactId} ${pomBuild.version} ${port} ${type} ${pomBuild.groupId} ${USR} ${PSW}" 
              }
            }
          }
        }
      }
    }
  }
}
