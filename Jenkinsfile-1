pipeline {
  agent none
  environment {
    NEXUS_CREDENTIALS = credentials('nexus-auth')      
  } 
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  stages {
    stage("Build"){
      agent {
        docker {
          image 'maven:3.6.3-jdk-11'
        }
      }
      steps {
        dir('/home/jcantu/.jenkins/workspace/test-task') {
          sh 'mvn -s ./settings.xml -Dmaven.test.skip=true clean package -B -ntp -DGFB_MVN_NEXUS_USR=$NEXUS_CREDENTIALS_USR -DGFB_MVN_NEXUS_PWD=$NEXUS_CREDENTIALS_PSW'
          }
      }
    }
    // stage('Test') {             
    //   agent {
    //     docker {
    //       image 'maven:3.6.3-jdk-11'
    //     }
    //   }
    //   steps {
    //     sh 'mvn verify -B -ntp'                 
    //   }
    //   post {                 
    //     success {                                                              
    //       junit 'target/surefire-reports/*.xml'
    //       step([
    //         $class: 'JacocoPublisher',
    //         execPattern: 'target/*.exec',
    //         classPattern: 'target/classes',
    //         sourcePattern: 'src/main/java',
    //         exclusionPattern: 'src/test/*'
    //       ])
    //       echo '<<Test Success>>'    
    //     }
    //     failure {
    //       echo '<<Test Failure>>'                                                            
    //     }
    //   }                            
    // }
    stage('Quality') {
      agent {
        docker {
          image 'maven:3.6.3-jdk-11'
        }
      }
      steps {
        script{
          withSonarQubeEnv('sonar') {
              sh 'mvn sonar:sonar -B -ntp -Dsonar.projectKey=project-test'
          }
          sleep 15
          timeout(time: 2, unit: 'MINUTES') {
            def qg = waitForQualityGate()                  
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
          }
        }              
      }
      post {
        success {
          echo '<<Artifact Deploy Success>>'
        }
        failure {
          echo '<<Artifact Deploy Failure>>'                                                            
        }
      }
    }
    stage("Artifact Nexus"){
      agent {
        docker {
          image 'maven:3.6.3-jdk-11'
        }
      }
      steps {
        script {
          dir ('/home/jcantu/.jenkins/workspace/test-task') {
            sh "mvn clean -s ./settings.xml -U -B -ntp deploy -Dmaven.test.skip=true"
          }
        }
      }
      post {
        success {
          echo '<<Artifact Deploy Success>>'
        }
        failure {
          echo '<<Artifact Deploy Failure>>'                                                            
        }
      }
    }
    stage("Docker Nexus"){
      agent any
      steps {
        script {
          dir ('/home/jcantu/.jenkins/workspace/test-task'){
            withCredentials([usernamePassword(credentialsId: 'nexus-auth', passwordVariable: 'PSW', usernameVariable: 'USR')]) {
              def pomBuild = readMavenPom file: 'pom.xml'
              def repoDocker = "localhost:8085/${pomBuild.artifactId}"
              //Login to Nexus Docker Registry
              sh "echo ${PSW} | docker login -u ${USR} --password-stdin localhost:8085"
              //Create Docker image from Dockerfile
              sh "docker build --no-cache -f Dockerfile -t ${pomBuild.artifactId}:${pomBuild.version} ."
              sh "docker ps -a"
              //Assign tag to the image
              sh "docker tag ${pomBuild.artifactId}:${pomBuild.version} ${repoDocker}:${pomBuild.version}"
              //Push image to repository
              sh "docker push ${repoDocker}:${pomBuild.version}"
              sh "docker logout"
              sh "docker rmi -f ${pomBuild.artifactId}:${pomBuild.version}"
              sh "docker rmi -f ${repoDocker}:${pomBuild.version}"
              sh "docker image prune -f"
              sh "docker builder prune -f"
            }
          }
        }
      }
      post {
        success {
          echo '<<Nexus Docker Image Success>>'
        }
        failure {
          echo '<<Nexus Docker Image Failure>>'                                                            
        }
      }
    }
    stage("Deploy") {
      agent any
      steps {
        script{
          dir ('/home/jcantu/.jenkins/workspace/test-task'){
            withCredentials([usernamePassword(credentialsId: 'nexus-auth', passwordVariable: 'PSW', usernameVariable: 'USR')]) {
              def pomBuild = readMavenPom file: 'pom.xml'
              def PORT = 8085
              def REPO_DOCKER = "${env.WEB_REPO_DOCKER}"                               
              def WEB_TARGET_HOSTS
              def WEB_USER_HOST
              def WEB_USER_DIR = "${env.WEB_USER_DIR}"   
                                
              // Define target ip depends on the branch (prod or dev)

              // TODO change branches! just for test (inverted)
              if("${GIT_BRANCH}" == 'origin/develop') {
                  WEB_TARGET_HOSTS = "${env.WEB_PRO_TARGET_HOSTS}".split()
                  WEB_USER_HOST = "${env.WEB_PRO_USER}"
              } else if("${GIT_BRANCH}" == 'origin/master') {
                  WEB_TARGET_HOSTS = "${env.WEB_DEV_TARGET_HOSTS}".split()
                  WEB_USER_HOST = "${env.WEB_DEV_USER}"
              } else {
                  error "The branch ${GIT_BRANCH} is not valid"                          
              }

              echo "Brach: ${GIT_BRANCH}"
              echo "Web User Host: ${WEB_USER_HOST}"
              echo "Web Target Hosts: ${WEB_TARGET_HOSTS}"   

              sshagent ( credentials: ['deploy-server']){
                for(WEB_TARGET_HOST in WEB_TARGET_HOSTS) {
                  sh "ssh ${WEB_USER_HOST}@${WEB_TARGET_HOST} 'srv/${WEB_USER_DIR}/exec/ci/deploy.sh' ${pomBuild.artifactId} ${pomBuild.version} ${PORT} ${REPO_DOCKER} ${USR} ${PSW} ${WEB_USER_DIR}" 
                }
              }
            }
          }
        }
      }
      post {
        success {
          echo '<<Deploy Success>>'
        }
        failure {
          echo '<<Deploy Failure>>'                                                            
        }
      }
    }
  }
}
