pipeline {
  agent none
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  environment {
    dockerHubUser = "admin"
    dockerHubPassword = "atomic"
  }
  stages {
    stage('Scan') {
      agent any
      steps {
        withSonarQubeEnv(installationName: 'sonar') { 
          sh './mvnw clean org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar'
        }
      }
    }
    stage("Build Jar File"){
      agent {
        docker {
          image 'maven:3.6.3-jdk-11'
        }
      }
      steps {
        dir('/home/jcantu/.jenkins/workspace/test-task') {
          sh 'mvn -U -Dmaven.test.skip=true clean install'
        }
      }
    }
    stage("Upload Artifact to nexus"){
      agent {
        docker {
          image 'maven:3.6.3-jdk-11'
        }
      }
      steps {
        script {
          dir ('/home/jcantu/.jenkins/workspace/test-task') {
            def pomBuild = readMavenPom file: 'pom.xml'
            def type = "jar"
            def repository = "maven-test-release"
            def env = "-dev"

            def route = "target/${pomBuild.artifactId}-${pomBuild.version}.${type}"

            if (fileExists(file: route)) {
                def newFile = "target/demo-0.0.1-RELEASE.jar"
                writeFile(file: newFile, encoding: "UTF-8", text: readFile(file: route, encoding: "UTF-8"))
            }
            nexusPublisher nexusInstanceId: 'nexus',
            nexusRepositoryId: "${repository}",
            packages: [[$class: 'MavenPackage',
            mavenAssetList: [[classifier: '', extension: '', filePath: "target/demo-0.0.1-RELEASE.jar"]],
            mavenCoordinate: [
                artifactId: "${pomBuild.artifactId}",
                groupId: "${pomBuild.groupId}",
                packaging: "${type}",
                version: "-RELEASE"]
            ]]
          }
        }
      }
    }

    stage("Upload image to Nexus"){
      agent {
        docker {
          image 'maven:3.6.3-jdk-11'
        }
      }
      steps {
        script {
          dir ('/home/jcantu/.jenkins/workspace/test-task'){
            withCredentials([usernamePassword(credentialsId: 'nexus-auth', passwordVariable: 'atomic', usernameVariable: 'admin')]) {
              def pomBuild = readMavenPom file: 'pom.xml'
              def repoDocker = "localhost:8085/${pomBuild.artifactId}"
              sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
              sh "docker build -f Dockerfile -t ${pomBuild.artifactId}:${pomBuild.version} ."
              sh "docker ps -a"
              sh "docker tag ${pomBuild.artifactId}:${pomBuild.version} ${repoDocker}:${pomBuild.version}"
              sh "docker tag ${pomBuild.artifactId}:${pomBuild.version} ${repoDocker}:latest"
              sh "docker push ${repoDocker}:${pomBuild.version}"
              sh "docker push ${repoDocker}:latest"
              sh "docker logout"
              sh "docker rmi -f ${pomBuild.artifactId}:${pomBuild.version}"
              sh "docker rmi -f ${repoDocker}:${pomBuild.version}"
              sh "docker rmi -f ${repoDocker}:latest"
              sh "docker image prune -f"
              sh "docker builder prune -f"
            }
          }
        }
      }
    }
    stage("Deploy") {
      agent any
      steps {
        script{
          def pomBuild = readMavenPom file: 'pom.xml'
          def port = 9100
          def type = "jar"         
          //scp -o StrictHostKeyChecking=no target/*.jar user@host:/home/ubuntu           
          sshagent ( credentials: ['deploy-server']){
            sh "ssh jorge@192.168.1.70 'ubuntu/deploy.sh' ${pomBuild.artifactId} ${pomBuild.version} ${pomBuild.groupId} ${port} ${type}" 
          }
        }
      }
    }
  }
}
